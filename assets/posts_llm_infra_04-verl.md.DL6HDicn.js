import{_ as i,c as a,o as n,ah as l}from"./chunks/framework.CvbyeFFO.js";const g=JSON.parse('{"title":"Verl","description":"","frontmatter":{"title":"Verl","date":"2025-09-03T20:18:46.000Z","create":"2025-09-03T20:18:46.000Z","categories":["infra"],"tags":["verl","ray","ray actor","ray task","hybrid flow","控制流","计算流","Single Controller","Multi Controller","训练引擎","推理引擎","fsdp","模型放置策略","分组放置","Hybrid Engine","Colocate","Worker","WorkerDict","WorkerGroup","main_ppo.py","ray_trainer.py","core_algos.py","fsdp_workers.py","ActorRolloutRefWorker","update_actor","generate_sequences","compute_log_prob","compute_ref_log_prob","CriticWorker","compute_values","update_critic","RewardModelWorker","compute_rm_score"]},"headers":[],"relativePath":"posts/llm/infra/04-verl.md","filePath":"posts/llm/infra/04-verl.md","lastUpdated":1761231250000}'),t={name:"posts/llm/infra/04-verl.md"};function e(h,s,p,k,r,o){return n(),a("div",null,s[0]||(s[0]=[l(`<h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/27676081245" target="_blank" rel="noreferrer">[AI Infra] VeRL 框架入门&amp;代码带读</a></li><li><a href="https://zhuanlan.zhihu.com/p/30876678559" target="_blank" rel="noreferrer">从零开始的verl框架解析</a></li><li><a href="https://www.cnblogs.com/AikN/p/18893668" target="_blank" rel="noreferrer">全网第二细致的Verl GRPO实现拆解讲解</a></li><li><a href="https://zhuanlan.zhihu.com/p/1903855264207200959" target="_blank" rel="noreferrer">TinyZero最详细复现笔记（二）：VeRL框架与PPO训练细节</a></li></ul><h2 id="核心概念" tabindex="-1">核心概念 <a class="header-anchor" href="#核心概念" aria-label="Permalink to &quot;核心概念&quot;">​</a></h2><h3 id="通用概念" tabindex="-1">通用概念 <a class="header-anchor" href="#通用概念" aria-label="Permalink to &quot;通用概念&quot;">​</a></h3><h4 id="rl" tabindex="-1">RL <a class="header-anchor" href="#rl" aria-label="Permalink to &quot;RL&quot;">​</a></h4><div class="custom-block tip"><div class="custom-block-title">RL</div><p><strong>惩罚信号</strong></p><p><strong>当前模型生产样本训练自身</strong></p></div><h4 id="ray" tabindex="-1">Ray <a class="header-anchor" href="#ray" aria-label="Permalink to &quot;Ray&quot;">​</a></h4><div class="custom-block tip"><div class="custom-block-title">Ray</div><p>分布式训练框架，管理复杂的Roles。</p><p><strong>Ray Actor</strong></p><ul><li><strong>有状态的</strong><code>远程计算任务</code>，进程。</li><li><code>ray.remote</code> 装饰的<code>python class</code></li></ul><p><strong>Ray Task</strong></p><ul><li><strong>无状态的</strong>远程<strong>计算任务</strong>，局部变量仅当前可见，<strong>对任务提交者不可见</strong>，<code>无状态</code></li><li>ray.remote 装饰的python class，</li></ul><p><strong>资源管理</strong></p><ul><li>Ray可<code>自动管理CPU/GPU/Mem的分配</code>，比如<strong>指定actor所需资源</strong>；设计资源组等。</li><li>通过Ray实现<strong>各种角色</strong>、<strong>并行策略</strong>的<code>资源分配</code>，实现<code>Hybrid Engine</code>等<code>colocate策略</code>。</li></ul><p><strong>异步执行</strong></p><ul><li><strong>ray 异步计算</strong><ul><li>执行一个ray计算任务后，立刻返回任务的执行句柄，<code>用户代码不会阻塞</code></li><li>通过<code>ray.get/ray.wait</code>进行阻塞式/轮训式的结果获取</li></ul></li><li><strong>RL 异步</strong><ul><li>方便<strong>actor/critic/generator/rm之间</strong>，<code>overlap一些时间</code>， <ul><li>如：actor更新上一个batch时，generator已经可生成下一个batch了</li></ul></li></ul></li></ul></div><h4 id="并行策略" tabindex="-1">并行策略 <a class="header-anchor" href="#并行策略" aria-label="Permalink to &quot;并行策略&quot;">​</a></h4><div class="custom-block tip"><div class="custom-block-title">并行策略</div><p><strong>3D 并行</strong></p><ul><li><a href="https://plmsmile.github.io/posts/llm/infra/01-parrallel.html#%E6%95%B0%E6%8D%AE%E5%B9%B6%E8%A1%8C" target="_blank" rel="noreferrer">数据并行DP</a>、<a href="https://plmsmile.github.io/posts/llm/infra/01-parrallel.html#%E6%A8%A1%E5%9E%8B-%E6%B5%81%E6%B0%B4%E7%BA%BF%E5%B9%B6%E8%A1%8C-%E5%B1%82%E9%97%B4%E5%B9%B6%E8%A1%8C" target="_blank" rel="noreferrer">流水线并行PP</a>、<a href="https://plmsmile.github.io/posts/llm/infra/01-parrallel.html#%E6%A8%A1%E5%9E%8B-%E6%B5%81%E6%B0%B4%E7%BA%BF%E5%B9%B6%E8%A1%8C-%E5%B1%82%E9%97%B4%E5%B9%B6%E8%A1%8C" target="_blank" rel="noreferrer">张量并行TP</a>，<a href="https://plmsmile.github.io/posts/llm/infra/01-parrallel.html#_3d-%E5%B9%B6%E8%A1%8C-dp-pp-tp" target="_blank" rel="noreferrer">混合3D并行</a></li><li><strong>不同角色</strong>在<strong>不同阶段</strong>的<code>3D并行策略会变化</code><ul><li>hybrid engine做了很多优化，如<code>零冗余的模型参数re-sharding</code></li></ul></li></ul><p><a href="https://plmsmile.github.io/posts/llm/infra/01-parrallel.html#%E5%AE%8C%E5%85%A8%E5%88%86%E7%89%87%E6%95%B0%E6%8D%AE%E5%B9%B6%E8%A1%8C-pytorch-fsdp" target="_blank" rel="noreferrer">FSDP</a></p><ul><li><p>把<strong>模型参数(权重/优化器状态等)</strong> 在GPU之间<code>分片存储</code></p><ul><li>仅当某个GPU需要其他GPU参数时才进行通信。</li></ul></li><li><p>FPSDP，简单、逻辑清晰，research友好；Megatron：大模型更好</p></li><li><p>Verl同时支持megatron和FSDP</p></li></ul></div><h3 id="verl-概念" tabindex="-1">Verl 概念 <a class="header-anchor" href="#verl-概念" aria-label="Permalink to &quot;Verl 概念&quot;">​</a></h3><h4 id="hybrid-flow" tabindex="-1">Hybrid Flow <a class="header-anchor" href="#hybrid-flow" aria-label="Permalink to &quot;Hybrid Flow&quot;">​</a></h4><div class="custom-block tip"><div class="custom-block-title">Hybrid Flow</div><p><strong>核心思想</strong></p><ul><li>RL涉及<strong>多个模型交互协作</strong>，Verl设计<code>两层HybridFlow</code>，对<code>训练dataflow</code>进行<strong>解耦</strong></li></ul><p><strong>HyBrid Flow</strong></p><ul><li><strong>控制流</strong>：high-level，描述<code>多个角色之间的交互逻辑</code><ul><li>如：<code>actor采样</code>，<code>Critic/RM/Refernce开始计算分数</code>，完成后<code>计算GAE和loss</code>等</li></ul></li><li><strong>计算流</strong>：low-level，描述<code>单个角色内部的计算流程</code>，管理模型训练和推理具体过程 <ul><li>如：前向、反向传播、优化器更新、自回归生成等。</li></ul></li></ul></div><h4 id="单控制器vs多控制器" tabindex="-1">单控制器vs多控制器 <a class="header-anchor" href="#单控制器vs多控制器" aria-label="Permalink to &quot;单控制器vs多控制器&quot;">​</a></h4><div class="custom-block tip"><div class="custom-block-title">Single Controller vs Multiple Controller 两种设计模式</div><p><strong>Single Controller</strong></p><ul><li>核心：使用<strong>1个中央控制器</strong>来<code>统一管理所有子模块</code></li><li>优点：架构清晰、容易理解</li><li>VeRL：<code>控制流</code>， <code>Single Controller</code><ul><li>易于新算法开发</li></ul></li></ul><p><strong>Multiple Controller</strong></p><ul><li>核心：把控制逻辑<code>分散到多个控制器</code>，<strong>每个</strong>控制器<strong>负责特定模块</strong>；</li><li>优点：<code>缓解单一控制器通信开销过大的问题</code>；<strong>集合通信</strong>实现各角色的同步控制</li><li>VeRL：<code>计算流</code>, <code>Multi Controller </code><ul><li>通过<strong>多层级Worker</strong>来实现计算流MultiController <ul><li><code>RayWorkerGroup</code> -&gt; <code>WorkerDict</code> -&gt; <code>MOdelWorker</code> -&gt; <code>ParallelWorker</code></li></ul></li></ul></li><li>业界主流训练推理引擎，<strong>多是基于多控制器</strong>。 <ul><li>训练引擎：FSDP、Megatron等</li><li>推理引擎：也有计划逐渐适配该模式，如vLLM、sglang等。</li></ul></li></ul></div><p>SingleController 来实现RL算法的控制流</p><img src="https://pic4.zhimg.com/v2-de9366509e855360582c1b8c5814334d_1440w.jpg" style="display:block;margin:auto;" width="70%"><h4 id="训练推理-模型放置策略" tabindex="-1">训练推理/模型放置策略 <a class="header-anchor" href="#训练推理-模型放置策略" aria-label="Permalink to &quot;训练推理/模型放置策略&quot;">​</a></h4><div class="custom-block tip"><div class="custom-block-title">训练引擎 vs 推理引擎</div><p><strong>训练引擎</strong></p><ul><li>训练：<code>Actor、Critic训练</code></li></ul><p><strong>推理引擎</strong></p><ul><li><p>推理：<code>Generator生成样本</code>；</p></li><li><p>仅涉及<code>前向过程</code>，也会使用训练引擎</p><ul><li><p><code>Critic/RM/Reference</code> 打分<code>计算ligits和score</code>等</p></li><li><p>因为训练引擎一般比推理引擎精度更高(因为kernal fusion底层因素)</p></li></ul></li></ul></div><div class="custom-block tip"><div class="custom-block-title">模型放置策略</div><p><strong>分开放置</strong></p><ul><li>思想：<code>所有角色</code>放在<code>不同设备</code></li><li>优点：<strong>异步overlap执行时间</strong></li><li>缺点：<strong>GPU</strong>在训练过程中会<strong>空闲</strong></li></ul><p><strong>分组放置</strong></p><ul><li>思想：<code>角色分组</code>，<code>按组分配</code>在相同设备上</li><li>优点：可以<strong>overlap时间</strong>，<strong>减少GPU Idel时间</strong></li><li>常见分组： <ul><li>分法1：Actor+Ref，Critc+RM, Generator 单独一组</li><li><strong>分法2(Verl主流)</strong>：<code>Actor+Generator一组</code>，<code>其余单独放置</code><ul><li>因为Actor和Generator参数需要实时同步</li></ul></li></ul></li></ul><p><strong>一起放置</strong></p><ul><li>思想：<code>所有角色</code>放在<code>相同设备上</code></li><li>优点：GPU时钟被占用</li><li>缺点：只能串行执行</li></ul></div><h4 id="hybrid-engine-workerdict-workergroup" tabindex="-1">Hybrid Engine/WorkerDict/WorkerGroup <a class="header-anchor" href="#hybrid-engine-workerdict-workergroup" aria-label="Permalink to &quot;Hybrid Engine/WorkerDict/WorkerGroup&quot;">​</a></h4><div class="custom-block tip"><div class="custom-block-title">VeRL Hybrid Engine</div><p><strong>灵活支持</strong> <code>各种模型放置策略</code></p><ul><li>通过ResourcePool支持</li><li>以<strong>colocate</strong>为主：把<strong>actor</strong>的<code>训练和推理引擎</code> <code>放置在一起</code>，<strong>动态切换角色</strong><ul><li>colocate<strong>共同放置</strong>：把不同功能模块计算单元，<strong>放在一个设备上，提高效率</strong></li></ul></li></ul><p><strong>WorkerDict</strong></p><ul><li><p>Worker被封装进<code>WorkerDict</code>，实现<code>Worker角色灵活切换</code></p><ul><li><strong>不同角色</strong>可放置在<strong>相同设备</strong>上，通过rebind进行转换，通过reload/offload来切换参数</li></ul></li><li><p><code>每个GPU</code>调度<code>1个WorkerDict</code>，主要方便ray<strong>管理和角色切换</strong></p></li></ul><p><strong>WorkerGroup</strong></p><ul><li>当前<strong>colocate的RL角色</strong>所占据设备的<code>所有WorkerDict</code></li><li>WG管理一组远程运行的workers，<strong>colocate的RL角色</strong>依托WorkerGroup管理 <ul><li><strong>统一管理数据</strong>resharding、<strong>任务执行</strong>等分布式逻辑</li></ul></li><li>WG 作为 SingleController和workers之间的中介，把worker方法绑定到WG上。</li></ul><p><strong>高效切换策略：Zero Redundancy Model Resharding</strong></p><ul><li>背景：<strong>worker可动态切换角色</strong>(<code>actor-&gt;generator</code>)，<code>需不同的参数切分逻辑</code>。</li><li>Verl设计了高效切换策略</li></ul><p><strong>数据传输协议</strong></p><ul><li>背景：<strong>worker可动态切换角色</strong>(<code>actor-&gt;generator</code>)，为<strong>适配不同角色和方法所需的数据划分细节</strong><ul><li>如dp维度切分数据、3d维度切分数据等</li></ul></li><li>设计了<strong>一套数据传输协议</strong>，主要包括<code>数据分发(Dispatch)</code>和<code>收集(Collect)</code></li></ul></div><p>HybridFlow支持的训推并行策略、权重转换策略、模型放置和执行策略</p><img src="https://pica.zhimg.com/v2-89fa35748497c0961088732d169c967c_r.jpg" style="display:block;margin:auto;" width="70%"><h4 id="verl-训练数据执行流程" tabindex="-1">Verl 训练数据执行流程 <a class="header-anchor" href="#verl-训练数据执行流程" aria-label="Permalink to &quot;Verl 训练数据执行流程&quot;">​</a></h4><div class="custom-block note"><div class="custom-block-title">训练数据流程</div><p><strong>概览</strong></p><ul><li><p>verl 把<strong>数据传输+方法执行</strong>协议，设计为<strong>python的装饰器</strong></p><ul><li>通过<strong>定义decorator绑定</strong>给各worker类的具体方法</li></ul></li><li><p>这样每个<strong>workergroup调用workerdict</strong>时，便可知如何分发和收集数据</p></li></ul><p><strong>具体流程</strong></p><ul><li>RayPPOTrainer 向 RayWorkerGroup 发起方法调用</li><li>RayWorkerGroup内部 <ul><li>先执行<strong>数据分发逻辑</strong></li><li>执行逻辑判断<strong>哪些worker需要运行任务</strong></li><li><strong>带有数据的任务</strong>被分发给<strong>指定的WorkerDicts</strong></li></ul></li><li>任务执行 <ul><li>每个<strong>WorkDict</strong>通过<strong>远程执行接受其任务</strong></li><li>完成任务后，<strong>结果返回</strong>给<strong>RayWorkerGroup</strong></li></ul></li><li>结果处理 <ul><li>结果通过<strong>收集逻辑</strong>进行处理 collect protocol</li><li>最终，<strong>处理后的结果</strong>返回给<strong>RayPPOTrainer</strong></li></ul></li></ul></div><img src="https://picx.zhimg.com/v2-2032486619ff764030eb18e0b90181eb_r.jpg" style="display:block;margin:auto;" width="70%"><h2 id="代码架构" tabindex="-1">代码架构 <a class="header-anchor" href="#代码架构" aria-label="Permalink to &quot;代码架构&quot;">​</a></h2><h3 id="trainer-组件" tabindex="-1">Trainer 组件 <a class="header-anchor" href="#trainer-组件" aria-label="Permalink to &quot;Trainer 组件&quot;">​</a></h3><ul><li><a href="https://verl.readthedocs.io/en/latest/examples/config.html" target="_blank" rel="noreferrer">config explanation</a></li></ul><h4 id="main-ppo-py" tabindex="-1">main_ppo.py <a class="header-anchor" href="#main-ppo-py" aria-label="Permalink to &quot;main_ppo.py&quot;">​</a></h4><div class="custom-block note"><div class="custom-block-title">main.py RL 算法主入口</div><p><strong>选择奖励函数 (model or rule)</strong></p><ul><li>model-based or rule-based</li><li>RewardManager + 用户自定义的reward_score</li></ul><p><strong>选择训练后端 (FSDP or Megatron)</strong></p><ul><li>FSDP：学术界</li><li>Megatron：工业界，大规模训练</li></ul><p><strong>调用RayPPOTrainer</strong></p><ul><li>调用trainer的init_workers初始化rl各角色的workergroup</li><li>调用fit进行训练</li></ul></div><h4 id="ray-trainer-py" tabindex="-1">ray_trainer.py <a class="header-anchor" href="#ray-trainer-py" aria-label="Permalink to &quot;ray_trainer.py&quot;">​</a></h4><div class="custom-block note"><div class="custom-block-title">ray_trainer.py</div><p><strong>初始化RL中的各个Role</strong></p><ul><li>多个角色：Actor、Critic、RM、Ref等</li><li>定义好各模型的角色、resource_pool的定义分配、workerdict和workergroup的初始化和分配</li></ul><p><strong>WorkerGroup 机制实现 (每类colocate model group)</strong></p><ul><li><code>actor_rollout_wg</code>：actor/generator互相切换的hybrid engine <ul><li>reload/offload params，reshard等</li></ul></li><li><code>critic_wg</code>：支持critic角色</li><li><code>ref_policy_wg</code>：reference角色，KL 需要</li><li><code>rm_wg</code>：RM，model based reward 需要</li><li>由 <code>init_workers</code> <strong>初始化各worker group</strong></li></ul><p><strong>ResourcePoolManager</strong></p><ul><li>资源池管理，封装ray的placement_group，指定角色合理分配到设备上</li></ul><p><strong>PPO loss 依赖的函数</strong></p><ul><li><code>apply_kl_penalty</code>：token-level kl reward <ul><li><code>kl loss</code>, 在<code>core_algos.py</code></li></ul></li><li><code>compute_advantage</code>：计算优势函数，核心在<code>core_algos.py</code></li><li><code>adv_esitmator</code>：支持PPO/GRPO/Reinforce++/Remax等算法，区别主要在advantages，核心依然在core_algos.py</li></ul><p><strong>Timer/Metrics函数等</strong></p><ul><li>metric计算函数 compute_data_metrics, compute_timing_metrics</li><li>save/load 断点续训、ckpt保存等</li><li>validate 逻辑、DP负载均衡逻辑等</li></ul><p><strong>Fit/Train loop</strong></p><ul><li><code>fit</code>：实现RL的完整训练流程，调用各worker进行实际计算</li></ul></div><h4 id="core-algos-py" tabindex="-1">core_algos.py <a class="header-anchor" href="#core-algos-py" aria-label="Permalink to &quot;core_algos.py&quot;">​</a></h4><div class="custom-block tip"><div class="custom-block-title">core_algos.py</div><p><strong>各种loss计算逻辑</strong></p><ul><li>policy loss, value loss, entropy loss, kl loss</li></ul><p><strong>各种advantages计算逻辑</strong></p><ul><li>各rl算法区分在advantages estimator 如何实现，</li></ul></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes one-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> AdvantageEstimator</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">str</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Enum</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:		</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;"> 	GAE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;gae&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">    GRPO</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;grpo&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">    REINFORCE_PLUS_PLUS</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;reinforce_plus_plus&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">    REINFORCE_PLUS_PLUS_BASELINE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;reinforce_plus_plus_baseline&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">    REMAX</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;remax&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">    RLOO</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;rloo&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">    OPO</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;opo&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">    GRPO_PASSK</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;grpo_passk&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">    GPG</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;gpg&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h4 id="main-generator-py" tabindex="-1">main_generator.py <a class="header-anchor" href="#main-generator-py" aria-label="Permalink to &quot;main_generator.py&quot;">​</a></h4><h4 id="main-eval-py" tabindex="-1">main_eval.py <a class="header-anchor" href="#main-eval-py" aria-label="Permalink to &quot;main_eval.py&quot;">​</a></h4><h3 id="workers-组件" tabindex="-1">Workers 组件 <a class="header-anchor" href="#workers-组件" aria-label="Permalink to &quot;Workers 组件&quot;">​</a></h3><p>workers 文件夹 定义了 RL中</p><ul><li>各角色的worker，high level, 负责描述逻辑</li><li>各角色计算时实际依赖的worker，low-level，负责描述运算</li></ul><h4 id="worker-各角色" tabindex="-1">worker 各角色 <a class="header-anchor" href="#worker-各角色" aria-label="Permalink to &quot;worker 各角色&quot;">​</a></h4><img src="https://pica.zhimg.com/v2-76d8a937ac3a2e7eabf7e039aaaad33e_1440w.jpg" style="display:block;margin:auto;" width="70%"><h4 id="fsdp-workers-py" tabindex="-1">fsdp_workers.py <a class="header-anchor" href="#fsdp-workers-py" aria-label="Permalink to &quot;fsdp_workers.py&quot;">​</a></h4><p>定义RL训练过程中用到的相关Worker，基于实际运行的workers封装的。</p><div class="custom-block info"><div class="custom-block-title">ActorRolloutRefWorker</div><p><strong>功能</strong></p><ul><li>可以<strong>单独</strong>作为RL中的<strong>Actor</strong>、<strong>Rollout</strong>、<strong>Reference</strong> (负责提供ref_log_prob计算KL)</li><li>可以基于hybrid engine，<strong>同时扮演多个角色</strong>，通过参数进行灵活切换</li></ul><p><strong>关键方法</strong></p><ul><li><strong>update_actor</strong></li><li><strong>generate_sequences</strong></li><li><strong>compute_log_prob</strong></li><li><strong>compute_ref_log_prob</strong></li></ul></div><p><strong>init_model</strong></p><ul><li>根据config指定model类型，初始化当前worker</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes one-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">._is_actor:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    actor_cfg </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> omega_conf_to_dataclass</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.config.actor)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.actor </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> DataParallelPPOActor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">        config</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">actor_cfg, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">actor_module</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.actor_module_fsdp, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">actor_optimizer</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.actor_optimizer</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    )</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>update_actor</strong></p><ul><li>基于Actor的update_policy，计算loss并更新Policy模型</li><li>基于ulysses_sharding_manager支持序列并行的数据前后处理，实现序列并行</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes one-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.ulysses_sharding_manager.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">preprocess_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">metrics </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.actor.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">update_policy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">output </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> DataProto</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">meta_info</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;metrics&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: metrics})</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">output </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.ulysses_sharding_manager.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">postprocess_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">output)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>generate_sequences</strong></p><ul><li>rollout引擎，inference生成数据</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes one-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">output </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.rollout.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">generate_sequences</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">prompts</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">prompts)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>compute_log_prob</strong></p><ul><li>基于actor训练引擎，同步计算old_logprobs，方便重要性采样计算</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes one-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.ulysses_sharding_manager.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">preprocess_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(data)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># actor 计算 log probs</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">output, entropys </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.actor.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">compute_log_prob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">calculate_entropy</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">True</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">output </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> DataProto.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">from_dict</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">  tensors</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;old_log_probs&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: output, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;entropys&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: entropys},</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">  meta_info</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;temperature&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.config.rollout.temperature},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">output </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.ulysses_sharding_manager.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">postprocess_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(output)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes one-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># DataParrallelPPOActor.compute_log_prob</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">log_probs_lst </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">entropy_lst </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> micro_batch </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> micro_batches:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    model_inputs </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">**</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">micro_batch.batch, </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">**</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">micro_batch.non_tensor_batch}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> torch.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">no_grad</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      	# [bs, response_len], [bs, response_len]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        entropy, log_probs </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">_forward_micro_batch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            model_inputs, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">temperature</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">temperature, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">calculate_entropy</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">calculate_entropy</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        )</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    log_probs_lst.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(log_probs)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> calculate_entropy:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        entropy_lst.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(entropy)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">log_probs </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> torch.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">concat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(log_probs_lst, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">dim</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes one-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># DataParrallelPPOActor._forward_micor_batch</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">output </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">actor_module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    input_ids</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">input_ids_rmpad,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    attention_mask</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">None</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    position_ids</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">position_ids_rmpad,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    **multi_modal_inputs,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    use_cache</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    **extra_args,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># prevent model thinks we are generating</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.use_fused_kernels:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    log_probs </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> output.log_probs.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">squeeze</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># (total_nnz,)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    entropy_rmpad </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> output.entropy.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">squeeze</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># (total_nnz,)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    logits_rmpad </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> output.logits.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">squeeze</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># (total_nnz, vocab_size)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    logits_rmpad.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">div_</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(temperature)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># only return response part:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> calculate_entropy:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    entropy </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> full_entropy.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">squeeze</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)[:, </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">response_length </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># (bsz, response_length)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">log_probs </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> full_log_probs.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">squeeze</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)[:, </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">response_length </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># (bsz, response_length)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p><strong>compute_ref_log_prob</strong></p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes one-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.ulysses_sharding_manager.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">preprocess_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(data)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># ref policy 计算 log probs</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">output, _ </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.ref_policy.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">compute_log_prob</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">calculate_entropy</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">output </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> DataProto.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">from_dict</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">tensors</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;ref_log_prob&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: output})</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">output </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.ulysses_sharding_manager.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">postprocess_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(output)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="custom-block info"><div class="custom-block-title">CriticWorker</div><p><strong>整体思想</strong></p><ul><li>整理逻辑和ActorRolloutRefWorker基本一致，只是后端是DataParallelPPOCritic</li><li>无需Rollout，且额外多了compute_values操作，通过Value Head 计算 token-level value</li></ul><p><strong>关键方法</strong></p><ul><li><strong>compute_values</strong></li><li><strong>update_critic</strong></li></ul></div><p><strong>compute_values</strong></p><ul><li>计算values</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes one-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># fsdp_workers.py . CriticWorker</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.ulysses_sharding_manager.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">preprocess_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">values </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.critic.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">compute_values</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">output </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> DataProto.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">from_dict</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">tensors</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;values&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: values})</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">output </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.ulysses_sharding_manager.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">postprocess_data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">output)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes one-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># DataParallelPPOCritic.compute_values</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">values_lst </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> micro_batch </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> micro_batches:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    model_inputs </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">**</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">micro_batch.batch, </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">**</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">micro_batch.non_tensor_batch}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    with</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> torch.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">no_grad</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        values </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">_forward_micro_batch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(model_inputs)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    values_lst.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(values)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">values </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> torch.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">concat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(values_lst, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">dim</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes one-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># DataParallelPPOCritic._forward_micro_batch</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">output </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">critic_module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    input_ids</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">input_ids,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    attention_mask</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">attention_mask,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    position_ids</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">position_ids,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    **multi_modal_inputs,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">    use_cache</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># prevent model thinks we are generating</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> hasattr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.critic_module, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;v_head&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # For trl.AutoModelForCausalLMWithValueHead</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    values </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> output[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    values </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> output.logits</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">values </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> values[:, </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">response_length </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">].</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">squeeze</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p><strong>update_critic</strong></p><ul><li>计算critic loss，更新critic</li></ul><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes one-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># CriticWorker.update_critic</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">metrics </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.critic.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">update_critic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">data)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes one-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 数据切分为多个mini-batch</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">mini_batches </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> data.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">split</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.config.ppo_mini_batch_size)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _ </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.config.ppo_epochs):</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  	# 数据可使用多轮ppo更新</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> batch_idx, mini_batch </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> enumerate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(mini_batches):</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 计算梯度累计步数</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.gradient_accumulation </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.config.ppo_mini_batch_size </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">//</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.config.ppo_micro_batch_size_per_gpu</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        )</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 划分成固定大小的micro_batchs，循环多个micro_batches才进行1次梯度更新</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        micro_batches </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mini_batch.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">split</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.config.ppo_micro_batch_size_per_gpu)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.critic_optimizer.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">zero_grad</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> micro_batch </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> micro_batches:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            micro_batch_metrics </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            model_inputs </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">**</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">micro_batch.batch, </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">**</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">micro_batch.non_tensor_batch}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            # 标记出哪些是回复内容，只对回复内容做critic loss</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            response_mask </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> model_inputs[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;response_mask&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            # 旧价值，裁剪参考</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            values </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> model_inputs[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;values&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            # 目标回报</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            returns </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> model_inputs[</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;returns&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            # 当前critic的价值预测</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            vpreds </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">_forward_micro_batch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(model_inputs)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            # value funtion loss，MSE loss，以及有多少比例的样本被clip</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            vf_loss, vf_clipfrac </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> core_algos.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">compute_value_loss</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">                vpreds</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">vpreds,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">                values</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">values,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">                returns</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">returns,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">                response_mask</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">response_mask,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">                cliprange_value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.config.cliprange_value,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">                loss_agg_mode</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.config.loss_agg_mode,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            )</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            loss </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> vf_loss </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">/</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.gradient_accumulation</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            loss.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">backward</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            micro_batch_metrics.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                    &quot;critic/vf_loss&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: vf_loss.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">detach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                    &quot;critic/vf_clipfrac&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: vf_clipfrac.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">detach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                    &quot;critic/vpred_mean&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">masked_mean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(vpreds, response_mask).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">detach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">            append_to_dict</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(metrics, micro_batch_metrics)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        grad_norm </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">_optimizer_step</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        mini_batch_metrics </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;critic/grad_norm&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: grad_norm.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">detach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">item</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">        append_to_dict</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(metrics, mini_batch_metrics)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.critic_optimizer.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">zero_grad</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes one-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> compute_value_loss</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">    vpreds</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;"> torch.Tensor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">    returns</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;"> torch.Tensor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">    values</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;"> torch.Tensor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">    response_mask</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#ABB2BF;"> torch.Tensor</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">    cliprange_value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">    loss_agg_mode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> str</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;token-mean&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  	# 基于旧values对预测价值做clip，防止更新幅度过大，和PPO clip 类似</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    vpredclipped </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> verl_F.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">clip_by_value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(vpreds, values </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cliprange_value, values </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cliprange_value)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 未裁剪的loss</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    vf_losses1 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (vpreds </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> returns) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">**</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 裁剪后的loss</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    vf_losses2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (vpredclipped </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> returns) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">**</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 取大值，选择更大的惩罚，避免因为裁切而意外降低loss</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    clipped_vf_losses </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> torch.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(vf_losses1, vf_losses2)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 0.5 MSE常见1/2因子，与梯度形式对应；只统计response_mask=1的位置，仅对回复token训练，忽略指令部分</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    vf_loss </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.5</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> agg_loss</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">loss_mat</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">clipped_vf_losses, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">loss_mask</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">response_mask, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">loss_agg_mode</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">loss_agg_mode)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # 统计裁剪占比</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    vf_clipfrac </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> verl_F.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">masked_mean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(torch.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">gt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(vf_losses2, vf_losses1).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">float</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), response_mask)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> vf_loss, vf_clipfrac</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><div class="custom-block info"><div class="custom-block-title">RewardModelWorker</div><p><strong>核心思想</strong></p><ul><li>基于模型的RM打分</li></ul><p><strong>关键函数</strong></p><ul><li><strong>compute_rm_score</strong></li></ul></div><p><strong>compute_rm_score</strong></p><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes one-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># RewardModelWorker.compute_rm_score</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">output </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> micro_batch </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> micro_batches:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    rm_score </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">_forward_micro_batch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(micro_batch)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    output.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(rm_score)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">scores </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> torch.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">cat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(output, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">dim</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># (batch_size)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-python vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes one-light one-dark-pro vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># RewardModelWorker._forward_micro_batch</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">output </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">reward_module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">input_ids</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">input_ids, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">attention_mask</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">attention_mask, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">position_ids</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">position_ids, </span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">use_cache</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">False</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">rm_score </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> output.logits  </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># (batch_size, seq_len, 1)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">rm_score </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rm_score.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">squeeze</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="custom-block info"><div class="custom-block-title">AsyncActorRolloutRefWorker</div><p><strong>核心功能</strong></p><ul><li>训练时rollout，</li><li>核心函数：<strong>generate_sequences</strong></li></ul><p><strong>支持不同backend</strong></p><ul><li>原生rollout逻辑：logits-&gt;softmax-&gt;sampling</li><li>HF TGI rollout逻辑</li><li>VLLM rollout逻辑 <ul><li>基于third_party修改的vllm engine进行推理</li><li>repeat 没有采用n_samples参数，而是直接repeat_interleave输入，多次生成</li><li>为了保证重要性采样和KL散度的准确性，old_log_probs没有使用vllm引擎结果，而是用训练引擎一起计算</li></ul></li><li>SGLang rollout 逻辑</li></ul></div><h4 id="megatron-workers-py" tabindex="-1">megatron_workers.py <a class="header-anchor" href="#megatron-workers-py" aria-label="Permalink to &quot;megatron_workers.py&quot;">​</a></h4><div class="custom-block info"><div class="custom-block-title">基于megatron后端实现的RL workers</div><ol><li>基于megatron支持4D并行，DP、TP、SP、PP；</li><li>核心逻辑基本和FSDP版本一致，但是底层逻辑需要适配megatron框架</li></ol></div><h3 id="single-controller-组件" tabindex="-1">Single Controller 组件 <a class="header-anchor" href="#single-controller-组件" aria-label="Permalink to &quot;Single Controller 组件&quot;">​</a></h3><ul><li><a href="https://verl.readthedocs.io/en/latest/hybrid_flow.html#" target="_blank" rel="noreferrer">HybridFlow Programming Guide</a></li></ul><div class="custom-block caution"><div class="custom-block-title">Single Controller</div><p><strong>Worker</strong></p><ul><li>方便管理worker进程在workergroup进程组内部信息和资源分配等</li></ul><p><strong>Resource Pool</strong></p><ul><li>管理资源池，包括池内节点和进程信息</li></ul><p><strong>WorkerGroup</strong></p><ul><li>管理多个worker所组成的workergroup</li></ul><p><strong>Decortor</strong></p><ul><li>定义各种worker数据分发和函数执行的装饰器</li></ul><p><strong>Ray</strong></p><ul><li>去管理worker(WorkerDict)和workergroup(RayWorkerGroup)</li></ul></div><h3 id="models-组件" tabindex="-1">Models 组件 <a class="header-anchor" href="#models-组件" aria-label="Permalink to &quot;Models 组件&quot;">​</a></h3><div class="custom-block caution"><div class="custom-block-title">Models组件</div><p>包含常见模型结构</p><ul><li>transformers</li><li>llama</li><li>Qwen2</li></ul></div><h3 id="utils-组件" tabindex="-1">Utils 组件 <a class="header-anchor" href="#utils-组件" aria-label="Permalink to &quot;Utils 组件&quot;">​</a></h3><div class="custom-block caution"><div class="custom-block-title">Utils组件</div><p><strong>Dataset</strong></p><ul><li>rl, sft, rm 数据集</li><li>常见功能 <ul><li>处理各数据集中的key</li><li>取出parquet里的prompt序列</li><li>apply_chat_ml + tokenize后设为input_ids</li></ul></li><li>verl的dataset和dataloader没有和训练过程强绑定，可在训练过程中轻松修改dataloader</li></ul><p><strong>reward_score</strong></p><ul><li>Math/code/search r1等不同的<strong>rule-grader</strong></li></ul></div>`,88)]))}const c=i(t,[["render",e]]);export{g as __pageData,c as default};
